validateSLAInput(index) {
    if (!this.rows[index]) {
        console.error(`Row at index ${index} is undefined`);
        return false; // Validation fails for an undefined row
    }

    // Reset validation errors for the specific row
    this.formValidationErrors[index] = {
        nearSLA: [],
        breachSLA: [],
    };

    const { nearSLA, BreachSLA } = this.rows[index];

    // Perform validation
    this.validateField('nearSLA', nearSLA, index, BreachSLA);
    this.validateField('breachSLA', BreachSLA, index, nearSLA);

    const blockingErrors = [
        'Nearing SLA Cannot be greater than Breached SLA',
        'Breached SLA Cannot be less than or equal to Nearing SLA',
        'This field is required',
    ];

    const hasBlockingErrors = Object.values(this.formValidationErrors[index]).some(
        errors => errors.some(error => blockingErrors.includes(error)),
    );

    return !hasBlockingErrors;
}

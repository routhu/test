validateSLAInput() {
        this.formValidationErrors = {
            nearSLA: [],
            breachSLA: [],
        };

        this.validateField('nearSLA', this.nearSLA);
        this.validateField('breachSLA', this.BreachSLA);

        const blockingErrors = [
            'Nearing SLA Cannot be greater than Breached SLA',
            'Breached SLA Cannot be less than Nearing SLA',
            'This field is required',
        ];

        const hasBlockingErrors = Object.values(this.formValidationErrors).some(
            errors => errors.some(error => blockingErrors.includes(error)),
        );

        return !hasBlockingErrors;
    }

    validateField(field, value) {
        this.formValidationErrors[field] = [];
        switch (field) {
            case 'nearSLA':
                this.validateRequired('nearSLA', value);
                this.validateNearSLABreachSLA(
                    field,
                    this.nearSLA,
                    this.BreachSLA,
                );
                break;
            case 'breachSLA':
                this.validateRequired('breachSLA', value);
                this.validateNearSLABreachSLA(
                    field,
                    this.nearSLA,
                    this.BreachSLA,
                );
                break;
            default:
                break;
        }

        this.formValidationErrors = { ...this.formValidationErrors };
    }

    validateRequired(field, value) {
        if (!value) {
            this.formValidationErrors[field].push(`This field is required`);
        } else if (value === 0) {
            this.formValidationErrors[field].push(`This field is required`);
        }
    }

    validateNearSLABreachSLA(field, nearsla, breachsla) {
        if (nearsla >= breachsla) {
            if (field === 'nearSLA') {
                this.formValidationErrors[field].push(
                    'Nearing SLA Cannot be greater than Breached SLA',
                );
            } else if (field === 'breachSLA') {
                this.formValidationErrors[field].push(
                    'Breached SLA Cannot be less than or equal to Nearing SLA',
                );
            }
        }
    }

    validateRequiredField() {
        const requiredFields =
            this.shadowRoot.querySelectorAll('.validate-field');
        let isValid = true;

        requiredFields.forEach(field => {
            if (!field.value) {
                field.setAttribute('error-message', 'This field is required.');
                isValid = false;
            } else {
                field.setAttribute('error-message', '');
            }
        });
        return isValid;
    }


import {
    SbElement,
    contexts,
    createContext,
} from '@scdevkit/service-bench-core';
import ScGridStyle from '@scdevkit/webkit/styles/ScGridStyle.js';
import { css, html } from 'lit';
import GraphQLClientService from '../../../../../services/grapghql-service.js';
import ProductStyles from '../../styles.js';

const restClientContext = createContext(contexts.REST_CLIENT);

export default class ImportProductConfigFile extends SbElement {
    static styles = [
        this.styles,
        css`
            ${ScGridStyle} ${ProductStyles}
        `,
    ];

    // Define properties for the component
    static properties = {
        file: { type: Object },
        pikList: { type: Object },
        errorMsg: { type: String },
        isLoading: { type: Boolean },
        isFileUpload: { type: Boolean },
        isPreImport: { type: Boolean },
        isPostImport: { type: Boolean },
    };

    static graphQLClientService;

    _restClientContextConsumer = restClientContext.createConsumer(this);

    constructor() {
        super();
        this.file = null;
        this.pickList = [];
        this.errorMsg = '';
        this.isLoading = false;
        this.isFileUpload = true;
        this.isPreImport = false;
        this.isPostImport = false;
        this.graphQLClientService = new GraphQLClientService(this);
    }

    connectedCallback() {
        super.connectedCallback();
        this.isLoading = false;
    }

    disconnectedCallback() {
        super.disconnectedCallback();
        this.attachModel = false;
        this.caseId = '';
        this.file = null;
    }

    closeSideSheet() {
        this.file = [];
        this.pickList = [];
        this.errorMsg = '';

        const event = new CustomEvent('sb-import-product-config-file-close', {
            detail: { open: false },
        });
        this.dispatchEvent(event);
        this.requestUpdate();
    }

    handleFileUpload(v) {
        const data = v.target._files[0];
        this.file = data;
    }

    handleCheckboxChange(v) {
        this.pickList = v.detail.value;
    }

    // need to address ESlint issues later
    async docFormUploadRestApi(restClient, formData) {
        const REST_API_APP_SERVICE = `55313-08-client-service-plugin-client-service-rest-exp-api`;
        const urlPath = `v1/documentstorage/documents:upload`;
        let response;

        try {
            response = await restClient.request(
                REST_API_APP_SERVICE,
                urlPath,
                'POST',
                formData,
            );

            const data = await response.json();
            return data;
        } catch (error) {
            return undefined;
        }
    }

    validate() {
        const fileInput = this.shadowRoot.querySelector('sc-file-input');
        const checkbox = this.shadowRoot.querySelector('sc-checkbox-group');
        const hasFile = this.file;

        let isValid = true;

        fileInput.setAttribute(
            'error-message',
            hasFile ? '' : 'Upload file is required.',
        );

        isValid = isValid && hasFile;

        const hasSelection = this.pickList.length > 0;

        checkbox.setAttribute(
            'error-message',
            hasSelection ? '' : 'Please select at least one.',
        );

        isValid = isValid && hasSelection;

        return isValid;
    }

    // need to address ESlint issues later
    async handelFileupload() {
        const isValid = this.validate();
        try {
            this.isLoading = true;
            this.errorMsg = '';
            const maxFileSize = 14;

            if (this.file && isValid) {
                if (this.file.size / 1048576 > maxFileSize) {
                    this.errorMsg = `Attachment size exceeds ${maxFileSize} MB`;
                    return '';
                }

                const formData = new FormData();
                formData.append('osName', 'GEMSOS');
                formData.append('docContent', this.file);
                formData.append(
                    'propertyValues',
                    JSON.stringify({
                        DocTitle: this.file.name,
                        DocType: this.getFileExtension(this.file.name),
                        DocCategory: 'active',
                        Channel: this.caseOrgCountry,
                        SrcUnit: this.businessFunction,
                        status: 'Pending',
                        CntryCode: this.caseOrgCountry,
                        createdID: this.userPSID,
                        delFlag: 'y',
                        priority: 'M',
                    }),
                );
                formData.append('docClassName', 'GEMSDoc');
                formData.append('domain', 'ccib');
                formData.append('fileName', this.file.name);
                formData.append('folderPath', '/');
                formData.append('contentType', this.file.type);

                const restClient = this._restClientContextConsumer.value;

                const result = await this.docFormUploadRestApi(
                    restClient,
                    formData,
                );

                if (result.docId) {
                    this.isFileUpload = false;
                    this.isPreImport = true;
                    /* const event = new CustomEvent('sb-import-product-config-file-result', {
                        detail: {
                            open: false,
                            data: {
                                fileName: data.fileName,
                                fileSize: data.fileExtension,
                                filenetDocId: data?.filenetDocId,
                            },
                        },
                    });
                    this.dispatchEvent(event); */
                } else {
                    this.errorMsg =
                        'Server Error, Might be attachment not added properly.';
                }
            }
        } catch (error) {
            console.error('File Attachment Error-', error);
            this.isLoading = false;
        } finally {
            this.isLoading = false;
        }
    }

    // need to address ESlint issues later
    getFileExtension(file) {
        return file.split('.').pop() || '';
    }

    render() {
        return html`
            <sc-side-sheet
                class="sc-side-sheet"
                label="Add New Product Combination"
                size="lg"
                width="50%"
                position="right"
                disable-outside-click=""
                .open=${this.open}
                @sc-hide=${this.closeSideSheet}
            >
                ${this.isFileUpload
                    ? html`<div slot="label">Upload file</div>
                          <sc-grid-row>
                              <sc-grid-column lg="12">
                                  <sc-file-input
                                      label="Upload File"
                                      label-size="xs"
                                      tooltip=""
                                      deletable=""
                                      tooltip-placement="top"
                                      placeholder="Click or drop file here"
                                      help-text=""
                                      value=""
                                      max-size="0"
                                      width="100%"
                                      icon-size="lg"
                                      direction="horizontal"
                                      required=""
                                      accept=".csv"
                                      @sc-change=${e =>
                                          this.handleFileUpload(e)}
                                  >
                                  </sc-file-input>
                              </sc-grid-column>
                          </sc-grid-row>
                          <sc-spacer size="sm" vertical=""></sc-spacer>
                          <sc-grid-row>
                              <sc-grid-column lg="12">
                                  <sc-checkbox-group
                                      label="Revise picklist for below:"
                                      label-size="md"
                                      tooltip="Select one or multiple."
                                      tooltip-placement="top"
                                      value=""
                                      direction="horizontal"
                                      required=""
                                      @sc-change=${e =>
                                          this.handleCheckboxChange(e)}
                                  >
                                      <sc-checkbox value="1"
                                          >Channels</sc-checkbox
                                      >
                                      <sc-checkbox value="2"
                                          >FRSC_PVM</sc-checkbox
                                      >
                                      <sc-checkbox value="3">CRC</sc-checkbox>
                                      <sc-checkbox value="4">CLM</sc-checkbox>
                                      <sc-checkbox value="4"
                                          >FRSCS2B</sc-checkbox
                                      >
                                      <sc-checkbox value="5"
                                          >Cash Management</sc-checkbox
                                      >
                                      <sc-checkbox value="6">Trade</sc-checkbox>
                                      <sc-checkbox value="7"
                                          >Corporate Finance</sc-checkbox
                                      >
                                      <sc-checkbox value="8"
                                          >Lending</sc-checkbox
                                      >
                                      <sc-checkbox value="9"
                                          >FRSC_Retail</sc-checkbox
                                      >
                                      <sc-checkbox value="10"
                                          >Securities Services</sc-checkbox
                                      >
                                      <sc-checkbox value="11"
                                          >Financial Markets</sc-checkbox
                                      >
                                      <sc-checkbox value="12"
                                          >Loans and Agency</sc-checkbox
                                      >
                                  </sc-checkbox-group></sc-grid-column
                              >
                          </sc-grid-row>
                          <sc-spacer size="sm" vertical=""></sc-spacer>
                          ${this.errorMsg
                              ? html`<sc-alert
                                    type="error"
                                    mode="default"
                                    title=""
                                    open=""
                                >
                                    ${this.errorMsg}
                                </sc-alert>`
                              : html``}
                          <div class="d-flex">
                              <sc-button
                                  fill
                                  ?loading=${this.isLoading}
                                  loading-text="...Uploading"
                                  @click=${() => this.handelFileupload()}
                                  >Next</sc-button
                              >
                              <sc-spacer size="xs" horizontal=""></sc-spacer>
                              <sc-button
                                  @click=${this.closeSideSheet}
                                  type="default"
                                  >Cancel</sc-button
                              >
                          </div>`
                    : ``}
                ${this.isPreImport
                    ? html`
                          <div slot="label">Pre Import Overview</div>
                          <p>
                              Here is what system will do to process the
                              uploaded file. Please check and confirm to proceed
                              further.
                          </p>
                          <sc-table
                              page-size="10"
                              hide-header=""
                              .conf=${[
                                  {
                                      property: 'actiontype',
                                      header: 'Action Type',
                                      sort: false,
                                      columnStyle: '',
                                  },
                                  {
                                      property: 'precheck',
                                      header: 'Pre Check',
                                      sort: false,
                                      columnStyle: '',
                                  },
                              ]}
                              .data=${[
                                  {
                                      actiontype:
                                          'Number of records which will be added newly',
                                      precheck: '5',
                                  },
                                  {
                                      actiontype:
                                          'Number of records which will be retained',
                                      precheck: '22',
                                  },
                                  {
                                      actiontype:
                                          'Number of records which will be removed',
                                      precheck: '0',
                                  },
                              ]}
                          >
                          </sc-table>
                          <sc-spacer size="sm" vertical=""></sc-spacer>
                          <sc-label label-size="md">
                              <div slot="label">
                                  <strong>Breakdown by Product:</strong>
                              </div>
                          </sc-label>
                          <sc-table
                              class="sc-table-default"
                              page-size="10"
                              sort=""
                              .conf=${[
                                  {
                                      property: 'product',
                                      header: 'Product',
                                      sort: false,
                                  },
                                  {
                                      property: 'recordsToAdd',
                                      header: '# Records to Add',
                                      sort: false,
                                  },
                                  {
                                      property: 'recordsRetained',
                                      header: '# Records Retained	',
                                      sort: false,
                                  },
                                  {
                                      property: 'recordsToDelete',
                                      header: '# Records to Delete',
                                      sort: false,
                                  },
                              ]}
                              .data=${[
                                  {
                                      product: 'Lending',
                                      recordsToAdd: '0',
                                      recordsRetained: '1',
                                      recordsToDelete: '146',
                                  },
                              ]}
                          >
                          </sc-table>
                          <p>
                              On click of Finish, system will proceed to do the
                              amendments accordingly.
                          </p>
                          <sc-spacer size="sm" vertical=""></sc-spacer>
                          <div class="d-flex">
                              <sc-button
                                  fill
                                  ?loading=${this.isLoading}
                                  loading-text="...Uploading"
                                  @click=${() => this.handelFileupload()}
                                  >Finish</sc-button
                              >
                              <sc-spacer size="xs" horizontal=""></sc-spacer>
                              <sc-button
                                  @click=${this.closeSideSheet}
                                  type="default"
                                  >Cancel</sc-button
                              >
                          </div>
                      `
                    : ``}
                ${this.isPostImport ? html`` : ``}
            </sc-side-sheet>
        `;
    }
}

// Define the custom element
if (!customElements.get('sb-import-product-config-file')) {
    customElements.define(
        'sb-import-product-config-file',
        ImportProductConfigFile,
    );
}

Expected to return a value at the end of async method 'handelFileupload'.eslintconsistent-return
Expected 'this' to be used by class async method 'docFormUploadRestApi'.eslintclass-methods-use-this
Expected 'this' to be used by class method 'getFileExtension'.eslintclass-methods-use-this


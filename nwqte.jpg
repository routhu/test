validateSLAInput() {
    let isValid = true;

    // Loop through each row and validate it
    this.rows.forEach((row, index) => {
        // Initialize or reset validation errors for each row
        this.formValidationErrors[index] = {
            nearSLA: [],
            breachSLA: [],
        };

        const { nearSLA, BreachSLA } = row;

        // Validate required fields
        this.validateRequired('nearSLA', nearSLA, index);
        this.validateRequired('breachSLA', BreachSLA, index);

        // Validate the business logic: NearSLA >= BreachSLA
        if (nearSLA >= BreachSLA) {
            this.formValidationErrors[index].nearSLA.push(
                'Nearing SLA Cannot be greater than Breached SLA'
            );
            this.formValidationErrors[index].breachSLA.push(
                'Breached SLA Cannot be less than or equal to Nearing SLA'
            );
        }

        // Check if there are any errors
        const hasErrors = this.formValidationErrors[index].nearSLA.length > 0 ||
            this.formValidationErrors[index].breachSLA.length > 0;

        if (hasErrors) {
            isValid = false;
        }
    });

    return isValid;
}

validateRequired(field, value, index) {
    if (!value || value === 0) {
        this.formValidationErrors[index][field].push('This field is required');
    }
}

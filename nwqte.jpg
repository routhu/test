import { contexts, createContext } from '@scdevkit/data';
import { LitElement, css, html } from 'lit';
import { sharedStyles } from '../../../../assets/shared-styles.js';
import '../../../../components/SearchClientModal.js';
import GraphQLClientService from '../../../../services/grapghql-service.js';
import NavigationService from '../../../../services/navigation-service.js';
import './UpdateRecord.js';
import './VerificationManagement.js';
import './components/attachFileModal.js';
import {
    clientManagement,
    contactManagement,
    verificationManager,
} from './components/card-definitions.js';
import {
    queryGetApprReqs,
    queryGetClientMasterId,
    queryGetCurrPwds,
    queryGetPwdHistory,
    queryPostNewEncry,
} from './queries.js';
import { getCommonTransformer } from './transformer.js';

const navigationContext = createContext(contexts.NAVIGATION);

let conf = [];
let approvalRequest = [];
let requestHistory = [];
let attachments = [];

export class PasswordManagement extends LitElement {
    static navigationService;
    static graphQLClientService;

    static styles = [
        sharedStyles,
        css`
            .loading {
                margin-top: 10rem;
                text-align: center;
            }
            .row-card {
                padding: 0px 0;
                align-items: flex-start;
                width: 100% !important;
            }
            sc-table {
                width: 100%;
                overflow-x: auto;
            }
            .password-container {
                margin: 20px;
                min-height: 50vh;
            }
            .password-btn-container {
                display: flex;
                justify-content: space-between;
                margin-top: 16px;
                div {
                    display: flex;
                    gap: 16px;
                }
            }
            .password-panel {
                h2 {
                    margin: 0px;
                }
            }
            .dropdown-container {
                width: fit-content;
            }
            .error-message-color {
                color: #ff0000;
            }
            .success-message-color {
                color: #0000ff;
            }
            .flex-space-bw-div {
                display: flex;
                justify-content: space-between;
            }
            .warning-message {
                margin-top: 16px;
                padding: 15px;
            }
            .verification-label {
                display: flex;
                gap: 16px;
                margin-top: 24px;
            }
            .verification-container {
                display: flex;
                flex-direction: column;
                gap: 16px;

                .verification-email {
                    width: fit-content;
                }
            }
            .client-name-container {
                display: flex;
                align-items: center;
                gap: 16px;

                .client-name-dropdown {
                    width: 100%;
                }

                .manual-tooltip {
                    margin-top: 14px;
                }
            }
        `,
    ];

    static properties = {
        selectedValue: { type: String },
        activeCardName: { type: String },
        selectcategory: { type: String },
        selectedPwdType: { type: String },
        fileUploadModal: { type: Boolean },
        selectedClientName: { type: String },
        selectedLeid: { type: String },
        businessFunction: { type: String },
        businessFunctionRole: { type: String },
        businessFunctionRoleListData: { type: Array },
        successMessage: { type: String },
        errorMessage: { type: String },
        comments: { type: String },
        newPwd: { type: String },
        byPassEncryptionWarningMessage: { type: String },
        clientData: { type: Array },
        currPwdData: { type: Array },
        apprvReqData: { type: Array },
        reqHistData: { type: Array },
        isApprvReq: { type: Boolean, state: true },
        clientName: { type: String },
        leid: { type: String },
        currPwd: { type: String },
        reqPwd: { type: String },
        makerComments: { type: String },
        isDataLoaded: { type: Boolean },
        pwdLevel: { type: Boolean },
        reqId: { type: String },
        isSave: { type: Boolean },
        isDelete: { type: Boolean },
        ClientNameId: { type: Array, state: true },
        openSearchClient: { type: Boolean, state: true },
        isAttachModel: { type: Boolean, state: true },
        attachmentData: { type: Array },
        showCurrPwdData: { type: Array },
        showApprvReqData: { type: Array },
        showReqHistData: { type: Array },
    };

    constructor() {
        super();
        this.pwdLevel = false;
        this.selectedValue = '';
        this.activeCardName = '';
        this.selectcategory = '';
        this.selectedPwdType = 'Random Password';
        this.fileUploadModal = false;
        this.selectedClientName;
        this.selectedLeid = '';
        this.successMessage = '';
        this.errorMessage = '';
        this.comments = '';
        this.newPwd = '';
        this.businessFunction = '';
        this.businessFunctionRole = '';
        this.businessFunctionRoleListData = [];
        this.byPassEncryptionWarningMessage = '';
        this.clientData = [];
        this.currPwdData = [];
        this.apprvReqData = [];
        this.reqHistData = [];
        this.attachmentData = [];
        this.isApprvReq = false;
        this.isSave = false;
        this.navigationService = new NavigationService(this);

        this.clientName = '';
        this.leid = '';
        this.currPwd = '';
        this.reqPwd = '';
        this.makerComments = '';
        this.isDataLoaded = false;
        this.reqId = '';
        this.isDelete = false;

        this.ClientNameId = [];
        this.openSearchClient = false;
        this.isAttachModel = false;
        this.showCurrPwdData = [];
        this.showApprvReqData = [];
        this.showReqHistData = [];

        try {
            this.graphQLClientService = new GraphQLClientService(this);
        } catch (error) {
            console.log({ error });
        }
    }

    connectedCallback() {
        super.connectedCallback();
        this.isDataLoaded = false;
        this.isAttachModel = false;
        this.businessFunction = sessionStorage.getItem('businessFunction');
        this.businessFunctionRole = sessionStorage.getItem(
            'businessFunctionRole',
        );

        this.ClientNameId = [];
        this.openSearchClient = false;

        conf = [
            {
                property: 'ClientName',
                header: 'Client/Product Name',
                sort: true,
                filter: true,
            },
            {
                property: 'LEID',
                header: 'LE ID',
                sort: true,
                filter: true,
                columnStyle: '',
            },
            {
                property: 'Country',
                header: 'Country',
                sort: false,
                filter: true,
                columnStyle: '',
            },
            {
                property: 'currPwd',
                header: 'Current Password',
                sort: false,
                filter: true,
                columnStyle: '',
            },
            {
                property: 'PreviousPwd',
                header: 'Previous Password',
                sort: false,
                filter: true,
                columnStyle: '',
            },
            {
                property: 'MakerRequestDateTime',
                header: 'Maker Request Date/Time',
                sort: false,
                filter: true,
                columnStyle: '',
            },
            {
                property: 'Maker',
                header: 'Maker',
                sort: false,
                filter: true,
                columnStyle: '',
            },
            {
                property: 'CheckerApprovedDateTime',
                header: 'Checker Approved Date/Time',
                sort: false,
                filter: true,
                columnStyle: '',
            },
            {
                property: 'Checker',
                header: 'Checker',
                sort: false,
                filter: true,
                columnStyle: '',
            },
        ];

        approvalRequest = [
            {
                property: 'ReqID',
                header: 'Req ID',
                sort: true,
                columnStyle: '',
                cell: (value, properties) => {
                    return html` <sc-link
                        @click=${e => (
                            (this.isSave = true),
                            (this.isDelete = false),
                            this.apprRowDetail(properties)
                        )}
                        >${value}</sc-link
                    >`;
                },
            },
            {
                property: 'ClientName',
                header: 'Client Name',
                sort: false,
                columnStyle: '',
            },
            {
                property: 'LEID',
                header: 'LE ID',
                sort: false,
                columnStyle: '',
            },
            {
                property: 'Status',
                header: 'Status',
                sort: false,
                columnStyle: '',
            },
            {
                property: 'Maker',
                header: 'Maker',
                sort: false,
                columnStyle: '',
            },
            {
                property: 'MakerRequestDateTime',
                header: 'Maker Request Date Time',
                sort: false,
                columnStyle: '',
            },
        ];

        requestHistory = [
            {
                property: 'ReqID',
                header: 'Req ID',
                sort: true,
                columnStyle: '',
                cell: (value, properties) => {
                    return html` <sc-link
                        @click=${e => (
                            (this.isSave = false),
                            (this.isDelete = false),
                            this.apprRowDetail(properties)
                        )}
                        >${value}</sc-link
                    >`;
                },
            },
            {
                property: 'ClientName',
                header: 'ClientName',
                sort: false,
                columnStyle: '',
            },
            {
                property: 'LEID',
                header: 'LE ID',
                sort: false,
                columnStyle: '',
            },
            {
                property: 'Status',
                header: 'Status',
                sort: false,
                columnStyle: '',
            },
            {
                property: 'RequestedPwd',
                header: 'Requested Password',
                sort: false,
                columnStyle: '',
            },
            {
                property: 'Maker',
                header: 'Maker',
                sort: false,
                columnStyle: '',
            },
            {
                property: 'MakingDateTime',
                header: 'Making Date Time',
                sort: false,
                columnStyle: '',
            },
            {
                property: 'Checker',
                header: 'Checker',
                sort: false,
                columnStyle: '',
            },
            {
                property: 'CheckingDateTime',
                header: 'Checking Date Time',
                sort: false,
                columnStyle: '',
            },
        ];

        attachments = [
            {
                property: 'No',
                header: '',
                sort: false,
                columnStyle: '',
            },
            {
                property: 'Subject',
                header: 'Subject',
                sort: false,
                columnStyle: '',
            },
            {
                property: 'FileUploaded',
                header: 'File Uploaded',
                sort: false,
                columnStyle: '',
            },
            {
                property: 'Action',
                header: '',
                cell: (value, properties) => {
                    return html`<sc-icon-button
                        type="default"
                        size="lg"
                        name="trash--line"
                        no-border=""
                        @click=${() => {
                            this.onAttachmentDeleteClick(properties);
                        }}
                    >
                    </sc-icon-button>`;
                },
            },
        ];
        console.log(this.conf);
        // this.loadRoleListData();
    }

    disconnectedCallback() {
        super.disconnectedCallback();

        this.ClientNameId = [];
        this.openSearchClient = false;
    }

    apprRowDetail(row) {
        this.isApprvReq = true;
        this.reqId = row.ReqID;
        this.clientName = row.ClientName;
        this.leid = row.LEID;
        this.currPwd = row.currPwd;
        this.reqPwd = row.reqPwd;
        this.makerComments = row.makerComments;
        //  this.requestUpdate();
        // this.navigationService.go(`updaterecord`);
        // console.log(row);
    }

    handleBusinessFunctionSelection(v) {
        this.businessFunction = v.detail.value;
    }

    handleBusinessFunctionRoleSelection(v) {
        this.businessFunctionRole = v.detail.value;
    }
    handleDropdownChange(event) {
        this.selectedValue = event.target.value;
        this.activeCardName = '';
        this.requestUpdate();
    }

    handleClientSrchSelectionBind(e) {
        this.errorMessage = '';
        if (e.detail.clientId) {
            this.ClientNameId = [
                {
                    label: e.detail.clientName,
                    value: e.detail.clientName,
                },
            ];

            this.selectedClientName = e.detail.clientName;
            this.selectedLeid = e.detail.clientId?.split('/')[0];
        } else {
        }
    }

    _handleButtonClick(name) {
        this.verificationSuccessMessage = '';
        this.activeCardName = name;
        this.isDataLoaded = false;

        if (name.includes('ShowCurrentPassword')) {
            this.loadCurrPwd();

            this.isDataLoaded = true;
        }
        if (name.includes('ApprovalRequests')) {
            this.loadApprReq();
            this.isDataLoaded = true;
        }
        if (name.includes('RequestHistory')) {
            this.loadReqHistory();
            this.isDataLoaded = true;
        }
    }

    handleRadioChange(event) {
        this.errorMessage = '';
        this.comments = '';
        this.selectedPwdType = event.target.value;
        event.target.value === 'By Pass Encryption'
            ? (this.byPassEncryptionWarningMessage =
                  'Warning !! No Password on attachments will be set by the system')
            : (this.byPassEncryptionWarningMessage = '');
    }

    openModal() {
        this.fileUploadModal = true;
    }

    fileUploadModalHide() {
        this.fileUploadModal = false;
    }

    handlePwdLevel(e) {
        if (e.detail.value == 'Client Specific') {
            this.pwdLevel = true;
        }
    }

    async saveData(data) {
        const qry = queryPostNewEncry(data);
        const res = await this.graphQLClientService.query(qry);
        const out = await getCommonTransformer(res, 'post_PwdMgmt');
        if (out.message.includes('Data Created successfully')) {
            this.successMessage = 'REQUEST HAS BEEN SUCCESSFULLY SUBMITTED';
        }
        if (out.message.includes('Duplicate')) {
            this.errorMessage = out.message;
        }

        if (this.successMessage === 'REQUEST HAS BEEN SUCCESSFULLY SUBMITTED') {
            this.selectedClientName = '';
            this.selectedPwdType = '';
            this.selectcategory = '';
            this.selectedLeid = '';
        }
    }

    handleSubmitClick() {
        this.errorMessage = '';
        let data = {};
        if (this.selectedClientName !== '') {
            if (this.selectedPwdType === 'By Pass Encryption') {
                if (this.comments === '') {
                    this.errorMessage = 'Comment is Required';
                } else {
                    this.errorMessage = '';
                    data = {
                        clientName: this.selectedClientName,
                        leid: this.selectedLeid,
                        newEncry: '<ByPassEncryption>',
                        makerComments: this.comments,
                        txnMode: 'New',
                    };
                    this.saveData(data);
                }
            } else if (this.selectedPwdType === 'Random Password') {
                this.errorMessage = '';
                data = {
                    clientName: this.selectedClientName,
                    leid: this.selectedLeid,
                    newEncry: '<Random>',
                    makerComments: '',
                    txnMode: 'New',
                };
                this.saveData(data);
            } else if (this.selectedPwdType === 'Standard Password') {
                if (this.comments === '') {
                    this.errorMessage = 'Comment is Required';
                } else if (this.newPwd === '') {
                    this.errorMessage = 'New Password is Required';
                } else {
                    this.errorMessage = '';
                    data = {
                        clientName: this.selectedClientName,
                        leid: this.selectedLeid,
                        newEncry: this.newPwd,
                        makerComments: this.comments,
                        txnMode: 'New',
                    };
                    this.saveData(data);
                }
            } else {
                this.selectedPwdType = 'Random Password';
            }
        } else {
            this.errorMessage = 'Client Name is Required';
        }
    }
    async handleSearchInput(ev) {
        let searchObject = {
            externalCusId: '',
            externalCustName: '',
            leid: '',
            fmIdFilterBy: '',
            clientName: ev.detail.value,
            clientId: '',
            groupName: '',
            clientSearchType: 'client',
            fmNameFilterBy: '',
            clientIdFilterBy: '',
            clientNameFilterBy: '',
            groupNameFilterBy: '',
        };
        if (ev.detail.value.length > 3) {
            const qry = queryGetClientMasterId(searchObject);

            const res = await this.graphQLClientService.query(qry);
            this.clientData = await getCommonTransformer(
                res,
                'getClientFMPickList',
            );
        }
    }

    async loadCurrPwd() {
        const qry = queryGetCurrPwds();
        let data = [];
        const res = await this.graphQLClientService.query(qry);
        data = await getCommonTransformer(res, 'get_CurrPasswords');
        this.currPwdData = data.map(item => ({
            ReqID: item.id,
            ClientName: item.clientName,
            LEID: item.leid,
            Country: item.country,
            currPwd: item.newPwd,
            PreviousPwd: item.previousPwd,
            UpdateMakerRequestDateTimedby: item.updatedBy,
            UpdatedDateTime: item.updatedOn,
            Maker: item.maker,
            CheckerApprovedDateTime: item.checkerRequest,
            Checker: item.checker,
        }));

        this.showCurrPwdData = this.currPwdData;
    }

    async loadApprReq() {
        const qry = queryGetApprReqs();
        const res = await this.graphQLClientService.query(qry);
        const data = await getCommonTransformer(res, 'get_ApprovalReq');
        this.apprvReqData = data.map(item => ({
            ReqID: item.id,
            ClientName: item.clientName,
            LEID: item.leid,
            Status: item.status,
            Maker: item.maker,
            MakerRequestDateTime: item.makerRequest,
            currPwd: item.previousPwd,
            reqPwd: item.newPwd,
            makerComments: item.makerComments,
        }));

        this.showApprvReqData = this.apprvReqData;
    }

    async loadReqHistory() {
        const qry = queryGetPwdHistory();
        const res = await this.graphQLClientService.query(qry);
        const data = await getCommonTransformer(res, 'get_PwdHistory');
        this.reqHistData = data.map(item => ({
            ReqID: item.id,
            ClientName: item.clientName,
            LEID: item.leid,
            Status: item.status,
            RequestedPwd: item.newPwd,
            Maker: item.maker,
            MakingDateTime: item.makerRequest,
            Checker: item.checker,
            CheckingDateTime: item.checkerRequest,
            currPwd: item.previousPwd,
            reqPwd: item.newPwd,
            makerComments: item.makerComments,
            checkerComments: item.checkerComments,
        }));

        this.showReqHistData = this.reqHistData;
    }

    openClientIDSearchModal() {
        this.openSearchClient = true;
    }

    handleAttachments(data) {
        this.attachmentData = [
            ...this.attachmentData,
            {
                No: this.attachmentData.length + 1,
                Subject: data.fileName,
                FileUploaded: `.. /${data.fileName}`,
            },
        ];
    }

    onAttachmentDeleteClick(file) {
        this.attachmentData = this.attachmentData.filter(
            attachment => attachment?.fileName !== file.fileName,
        );
    }

    filterCurrPwdTable(e) {
        const property = e.detail.property;
        const values = e.detail.value;
        const conditions = {};
        conditions[property] = values;
        let _data = [...this.currPwdData];

        for (const k in conditions) {
            const value = conditions[k];
            if (value.length) {
                _data = _data.filter(_ => value.includes(_[k]));
            }
        }

        this.showCurrPwdData = _data;
    }

    sortTable(data, sortDetail) {
        const sortedData = [...data];
        const [property, direction] = sortDetail.split(',');

        sortedData.sort((a, b) => {
            const valA = a[property];
            const valB = b[property];

            if (typeof valA === 'string' && typeof valB === 'string') {
                return direction === 'asc'
                    ? valA.localeCompare(valB)
                    : valB.localeCompare(valA);
            } else if (typeof valA === 'number' && typeof valB === 'number') {
                return direction === 'asc' ? valA - valB : valB - valA;
            } else {
                return 0;
            }
        });

        return sortedData;
    }

    sortCurrPwdTable(v) {
        this.showCurrPwdData = this.sortTable(
            this.showCurrPwdData,
            v.detail.value,
        );
    }

    sortApprvReqTable(v) {
        this.showApprvReqData = this.sortTable(
            this.apprvReqData,
            v.detail.value,
        );
    }

    sortReqHistoryTable(v) {
        this.showReqHistData = this.sortTable(this.reqHistData, v.detail.value);
    }

    renderContentPanel() {

${this.activeCardName ===
                            'PasswordManagement_ShowCurrentPassword'
                                ? html`
                                      <sc-grid-row class="row-inner">
                                          <sc-grid-column lg="12">
                                              <sc-table
                                                  class="sc-table-default"
                                                  pagination=""
                                                  page-size="10"
                                                  sort=""
                                                  .conf=${conf}
                                                  .data=${this.showCurrPwdData}
                                                  @sc-filter=${v =>
                                                      this.filterCurrPwdTable(
                                                          v,
                                                      )}
                                                  @sc-sort=${v =>
                                                      this.sortCurrPwdTable(v)}
                                              >
                                              </sc-table>
                                          </sc-grid-column>
                                          ${this.currPwdData.length === 0
                                              ? html` <sc-grid-column lg="12">
                                                    No items
                                                </sc-grid-column>`
                                              : ''}
                                      </sc-grid-row>
                                  `

import dayjs from 'dayjs/esm';
import { download } from './download.js';
import { convertUTCToLocal } from '../transformer.js';

export const exportResult = (data, conf, filenamePrefix = 'Product_Data') => {
    // Format data for export
    const dataToExport = data.map(item => ({
        ...item,
        timeCreated: convertUTCToLocal(item.timeCreated).toString(),
    }));

    // Prepare CSV headers
    let csvOutput = conf
        .filter(item => item.property) // Include only properties with headers
        .map(item => `"${item.header}"`) // Escape header names
        .join(',');

    // Prepare CSV rows
    dataToExport.forEach(entry => {
        const entryOutput = conf
            .filter(item => item.property) // Include only properties with headers
            .map(({ property }) => getValue(entry, property)) // Get property value
            .map(value =>
                `"${
                    typeof value === 'string'
                        ? value.replaceAll('"', '""') // Escape quotes in string
                        : JSON.stringify(value).replaceAll('"', '""') // Escape quotes in objects
                }"`
            )
            .join(',');
        csvOutput = `${csvOutput}\n${entryOutput}`;
    });

    // Generate filename with timestamp
    const filename = `${filenamePrefix}T${dayjs().format('YYYYMMDD_HHmmss')}.csv`;

    // Trigger download
    download(csvOutput, filename);
};

const getValue = (object, path, defaultValue = '') => {
    const keys = typeof path === 'string' ? path.split('.') : null;
    return keys
        ? keys.reduce((acc, key) => (acc && acc[key] ? acc[key] : defaultValue), object)
        : object;
};

export const download = (data, filename = 'report.csv') => {
    // Create a Blob with the CSV data and type
    const blob = new Blob([data], { type: 'text/csv' });

    // Create a URL for the Blob
    const url = URL.createObjectURL(blob);

    // Create an anchor tag for downloading
    const anchor = document.createElement('a');
    anchor.href = url;
    anchor.download = filename;

    // Trigger the download
    anchor.click();

    // Clean up the URL object
    URL.revokeObjectURL(url);
};

import { exportResult } from './exportResult.js';

exportResult(this.exportProductData, this.conf, 'Custom_Product_Data');

import { contexts, createContext } from '@scdevkit/service-bench-core';
import { LitElement, css, html } from 'lit';
import GraphQLClientService from '../../../../../services/grapghql-service.js';
import NavigationService from '../../../../../services/navigation-service.js';
import { addAttachments, uploadFile } from '../queries.js';
import { getCommomTransformer } from '../transformer.js';
import { BusinessException } from './businessException.js';
const restClientContext = createContext(contexts.REST_CLIENT);
export default class AttachModel extends LitElement {
    // Define styles for the component
    static styles = css``;
    static styles = [
        css`
            .flex-space-bw-div {
                display: flex;
                justify-content: space-between;
            }
        `,
    ];

    // Define properties for the component
    static properties = {
        caseId: { type: Boolean },
        isLoading: { type: Boolean },
        files: { type: Array },
        caseType: { type: Array },
        countryCode: { type: String },
        userId: { type: String },
        businessFunction: { type: String },
        isRightPanel: { type: Boolean },
        //Local
        attachModel: { type: Boolean },
        conf: { type: Array },
        errorMsg: { type: String },
        loggerUserName: { type: String },
    };
    static graphQLClientService;
    static navigationService;
    _restClientContextConsumer = restClientContext.createConsumer(this);

    constructor() {
        super();
        this.attachModel = false;
        this.errorMsg = '';
        this.caseId = '';
        this.files = [];
        this.conf = [];
        this.caseType = '';
        this.countryCode = '';
        this.userId = '';
        this.businessFunction = '';
        this.isLoading = false;
        this.graphQLClientService = new GraphQLClientService(this);
        this.navigationService = new NavigationService(this);
    }

    connectedCallback() {
        super.connectedCallback();
        this.isLoading = false;
        this.conf = [
            {
                property: 'name',
                header: 'Name',
                columnStyle: 'width: 200px',
                cell: (value, properties) => {
                    if (value <= 1) return '';
                    return html`<sc-text-input
                        label-size="xxs"
                        rows="2"
                        border-type="box"
                        value=${properties.name}
                        @sc-blur=${event => {
                            this.renameFile(
                                properties.file,
                                event.detail.value,
                            );
                            this.requestUpdate();
                        }}
                    >
                    </sc-text-input>`;
                },
                style: 'padding-left: 0px;width: 100px;',
            },
            { property: 'file', header: 'File', columnStyle: 'width: 200px' },
            {
                property: 'category',
                header: 'Category',
                columnStyle: 'width: 200px',
            },
            {
                property: 'remove',

                columnStyle: 'width: 50px',
                cell: (value, properties) => {
                    if (value <= 1) return '';
                    return html`<sc-icon-button
                        type="default"
                        size="md"
                        name="trash--line"
                        @click=${v => {
                            this.files = this.files.filter(
                                file =>
                                    !(
                                        file.name === properties.file &&
                                        file.size === properties.size
                                    ),
                            );
                        }}
                    >
                    </sc-icon-button>`;
                },
            },
        ];
    }

    // Function to rename a file in the array
    renameFile(oldName, newName) {
        const extension =
            oldName.split('.').length > 1 ? oldName.split('.').pop() : '';
        newName = newName + '.' + extension;
        const fileIndex = this.files.findIndex(file => file.name === oldName);
        if (fileIndex !== -1) {
            const oldFile = this.files[fileIndex];
            const newFile = new File([oldFile], newName, {
                type: oldFile.type,
                lastModified: oldFile.lastModified,
            });

            // Replace the old file with the new file
            this.files[fileIndex] = newFile;
            console.log(`Renamed "${oldName}" to "${newName}"`);
        } else {
            console.log(`File "${oldName}" not found.`);
        }
    }

    disconnectedCallback() {
        super.disconnectedCallback();
        this.attachModel = false;
        this.caseId = '';
        this.files = [];
    }

    closeModel() {
        const event = new CustomEvent('sc-search-attach-modal-close', {
            detail: { open: false },
        });
        this.dispatchEvent(event);
    }

    async docFormUploadRestApi(restClient, formData) {
        const REST_API_APP_SERVICE = `55313-08-client-service-plugin-client-service-rest-exp-api`;
        const urlPath = `v1/documentstorage/documents:upload`;
        //  var REST_API_APP_SERVICE = `documentstorage`;
        //  const urlPath = `documents:upload`;
        let response;

        try {
            // const headers = {
            //     'Content-Type': 'application/json',
            //     Authorization: `Bearer ${token}`,
            // };
            response = await restClient.request(
                REST_API_APP_SERVICE,
                urlPath,
                'POST',
                formData,
            );

            const data = await response.json();
            return data;
        } catch (error) {
            return undefined;
        }
    }

    async handelAttachments() {
        try {
            this.isLoading = true;
            let arrayList = [];
            let queryArray = [];
            this.errorMsg = '';

            if (this.files.length > 0) {
                if (this.isRightPanel == true) {
                    const Isgreater = this.files.every(
                        item => item.size / 1048576 > 14,
                    );

                    if (Isgreater) {
                        this.errorMsg = 'Attachment size exceeds 14 MB';
                        return '';
                    }
                } else {
                    const fileSize = this.files
                        .map(item => item.size)
                        .reduce((size, item) => size + item, 0);
                    if (fileSize / 1048576 > 14) {
                        this.errorMsg = 'Attachment size exceeds 14 MB';
                        return '';
                    }
                    console.log(fileSize / 1048576);
                }

                for (let item of this.files) {
                    const file = item;
                    var formData = new FormData();
                    formData.append('osName', 'GEMSOS');
                    // const base64String = await this.fileToBase64(item);
                    formData.append('docContent', item);
                    formData.append(
                        'propertyValues',
                        JSON.stringify({
                            DocTitle: item.name,
                            DocType: this.getFileExtension(item.name),
                            DocCategory: 'active',
                            Channel: this.countryCode,
                            srcRefNo: this.caseId,
                            SrcUnit: this.businessFunction,
                            status: 'Pending',
                            CntryCode: this.countryCode,
                            createdID: this.userId,
                            delFlag: 'y',
                            LstUpdDt: '',
                            priority: 'M',
                        }),
                    );

                    formData.append('docClassName', 'GEMSDoc');
                    formData.append('domain', 'ccib');
                    formData.append('fileName', item.name);
                    formData.append('folderPath', '/');
                    formData.append('contentType', item.type);
                    console.log(formData);

                    const restClient = this._restClientContextConsumer.value;

                    const result = await this.docFormUploadRestApi(
                        restClient,
                        formData,
                        //this._userContextConsumer.value,
                    );

                    if (typeof result === 'undefined') {
                        throw new BusinessException('Failed While Uploading');
                    }
                    let currentDate = new Date().toISOString();
                    let data = {
                        referenceId: 'case',
                        referenceType: this.caseType,
                        filenetDocId: result.docId,
                        caseId: this.caseId,
                        fileExtension: this.getFileExtension(item.name),
                        fileName: item.name,
                        fileSize: item.size,
                        filenetMetadata: currentDate,
                        attachmentType: item.type,
                        createdOn: currentDate,
                        createdBy: this.userId,
                        updatedOn: currentDate,
                        updatedBy: this.userId,
                        completedBy: this.userId,
                        completedOn: currentDate,
                        active: 'Y',
                    };

                    if (this.caseType.toLowerCase() == 'cp') {
                        data = {
                            ...(data || {}),
                            complaintTagging: this.complaintTagging,
                            createOpname:
                                sessionStorage.getItem('loggedInUserName'),
                        };
                    } else {
                        data = {
                            ...(data || {}),
                            updatedOpName:
                                sessionStorage.getItem('loggedInUserName'),
                            createdOpName:
                                sessionStorage.getItem('loggedInUserName'),
                        };
                    }
                    queryArray.push(data);
                }
                let event;
                if (this.isRightPanel == true) {
                    let result;

                    if (this.caseType.toLowerCase() == 'cp') {
                        let query = addAttachments(
                            this.caseId,
                            queryArray
                                .map(item => {
                                    const keyValuePairs = Object.entries(item)
                                        .map(
                                            ([key, value]) =>
                                                `${key}:"${value}"`,
                                        )
                                        .join(',');
                                    return `{${keyValuePairs}}`;
                                })
                                .join(','),
                        );

                        let response =
                            await this.graphQLClientService.query(query);
                        result = await getCommomTransformer(
                            response,
                            'post_checkCaseAndAddNewAttachments',
                        );
                    } else {
                        let query = uploadFile(
                            queryArray
                                .map(item => {
                                    const keyValuePairs = Object.entries(item)
                                        .map(
                                            ([key, value]) =>
                                                `${key}:"${value}"`,
                                        )
                                        .join(',');
                                    return `{${keyValuePairs}}`;
                                })
                                .join(','),
                        );
                        console.log(query);
                        let response =
                            await this.graphQLClientService.query(query);
                        debugger;
                        result = await getCommomTransformer(
                            response,
                            'post_AddAttachmentDocs',
                        );
                    }
                    this.isLoading = false;
                    event = new CustomEvent('sc-search-attach-modal-save', {
                        detail: { open: false, data: result },
                    });
                } else {
                    this.isLoading = false;
                    event = new CustomEvent('sc-search-attach-modal-save', {
                        detail: {
                            open: false,
                            data: queryArray.map(item => ({
                                docId: item.filenetDocId,
                                fileType: item.fileExtension,
                                fileName: item.fileName,
                                fileSize: item.fileSize,
                            })),
                            attachmentList: queryArray,
                        },
                    });
                }
                this.dispatchEvent(event);
            } else {
                this.errorMsg = 'Please choose the file to attach';
                return '';
            }
        } catch (error) {
            console.log(error);
            this.errorMsg =
                'Server Error, Might be some attachments not added properly.';
            console.error('File Attachment Error-', error);
            this.isLoading = false;
        } finally {
            this.isLoading = false;
        }
    }

    getFileExtension(file) {
        let fileName = '';

        if (typeof file === 'string') {
            fileName = file;
        } else if (file instanceof File) {
            fileName = file.name;
        } else {
            throw new Error('Input must be a string or a File object.');
        }

        const lastDotIndex = fileName.lastIndexOf('.');
        if (lastDotIndex === -1 || lastDotIndex === 0) {
            return '';
        }

        return fileName.substring(lastDotIndex + 1);
    }

    fileToBase64(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();

            reader.onloadend = () => {
                resolve(reader.result.split(',')[1]);
            };

            reader.onerror = error => {
                reject(error);
            };

            reader.readAsDataURL(file);
        });
    }

    // Render method to define the component's template
    render() {
        return html` <div>
            <sc-modal
                size="s"
                .open=${this.attachModel}
                disable-outside-click=""
                @sc-hide=${v => this.closeModel()}
            >
                <div slot="header">AttachSupportDocs</div>
                <div class="modal-body" style="padding-top: initial;">
                    <sc-grid-row>
                        <sc-grid-column lg="5">
                            <sc-file-input
                                label="Select File"
                                label-size="xs"
                                tooltip=""
                                deletable=""
                                tooltip-placement="top"
                                placeholder="Click or drop file here"
                                help-text=""
                                value=""
                                direction="vertical"
                                max-size="0"
                                width="100%"
                                icon-size="lg"
                                multiple=""
                                direction="horizontal"
                                @sc-change=${v => {
                                    this.files = [
                                        ...this.files,
                                        ...v.target._files,
                                    ];
                                    v.target._files = [];
                                }}
                                id="input-init-value"
                            >
                            </sc-file-input>
                        </sc-grid-column>
                    </sc-grid-row>
                    <sc-spacer size="xs" vertical=""></sc-spacer>
                    <sc-grid-row>
                        ${this.files.length > 0
                            ? html`<sc-table
                                  class="sc-table-default sc-table-qs-d-1"
                                  .conf=${this.conf}
                                  .data=${this.files.map(item => ({
                                      name: item.name
                                          .split('.')
                                          .slice(0, -1)
                                          .join('.'),
                                      file: item.name,
                                      size: item.size,
                                      type: item.type,
                                      category: 'File',
                                  }))}
                                  page-size="5"
                                  sort=""
                              >
                              </sc-table>`
                            : html``}
                    </sc-grid-row>
                </div>

                <div slot="footer">
                    <div class="flex-space-bw-div">
                        <sc-button
                            type="default"
                            size="md"
                            width="auto"
                            icon=""
                            icon-position=""
                            loading-text=""
                            fill=""
                            @click=${v => this.closeModel()}
                        >
                            Cancel
                        </sc-button>
                        <sc-button
                            type="default"
                            size="md"
                            width="auto"
                            icon=""
                            fill=""
                            icon-position=""
                            loading-text="...Attaching"
                            ?loading=${this.isLoading}
                            @click=${v => {
                                this.handelAttachments();
                            }}
                        >
                            Submit
                        </sc-button>
                    </div>
                    <sc-spacer size="xs" vertical=""></sc-spacer>
                    ${this.errorMsg !== ''
                        ? html`<sc-alert
                              type="error"
                              mode="default"
                              title=""
                              open=""
                          >
                              ${this.errorMsg}
                          </sc-alert>`
                        : html``}
                </div>
            </sc-modal>
        </div>`;
    }
}

// Define the custom element
if (!customElements.get('sb-attach-docs')) {
    customElements.define('sb-attach-docs', AttachModel);
}

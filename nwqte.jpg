
import { SbElement } from '@scdevkit/service-bench-core';
import ScGridStyle from '@scdevkit/webkit/styles/ScGridStyle.js';
import { css, html } from 'lit';
import { classMap } from 'lit/directives/class-map.js';
import GraphQLClientService from '../../../../../services/grapghql-service.js';
import ProductStyles from '../../styles.js';
import { getCommonTransformer } from '../../transformer.js';
import { validateRequiredField } from '../../validations.js';
import {
    addProductRecord,
    getProductsServicesDropdownData,
    getQueryTypeDropdownData,
    getSubProductGroupDropdownData,
} from '../queries.js';

export default class ProductConfigAddRecord extends SbElement {
    static styles = [
        this.styles,
        css`
            ${ScGridStyle} ${ProductStyles}
        `,
    ];

    static graphQLClientService;

    static properties = {
        rows: { type: Array },
        productGroupData: { type: Array },
        subProductGroupData: { type: Array },
        productsServicesData: { type: Array },
        queryTypeData: { type: Array },
        isLoading: { type: Boolean },
    };

    constructor() {
        super();
        this.rows = [
            {
                productGroup: '',
                productSubGroup: '',
                productsServices: '',
                queryType: '',
                selfServiceAvailability: '',
                message: '',
                productGroupData: [],
                subProductGroupData: [],
                productsServicesData: [],
                queryTypeData: [],
            },
        ];
        this.productGroupData = [];
        this.subProductGroupData = [];
        this.productsServicesData = [];
        this.queryTypeData = [];
        this.isLoading = false;

        try {
            this.graphQLClientService = new GraphQLClientService(this);
        } catch (error) {
            console.log({ error });
        }
    }

    connectedCallback() {
        super.connectedCallback();
    }

    disconnectedCallback() {
        super.disconnectedCallback();
    }

    handleAddRowClick() {
        this.rows = [
            ...this.rows,
            {
                productGroup: '',
                productSubGroup: '',
                productsServices: '',
                queryType: '',
                selfServiceAvailability: '',
                message: '',
                productGroupData: [],
                subProductGroupData: [],
                productsServicesData: [],
                queryTypeData: [],
            },
        ];
    }

    handleDeleteRowClick(index) {
        if (this.rows.length > 1) {
            this.rows.splice(index, 1);
            this.rows = [...this.rows];
        }
    }

    async loadSubProductGroupDropdown(val) {
        try {
            const params = { searchString: val };
            const query = getSubProductGroupDropdownData(params);
            const response = await this.graphQLClientService.query(query);
            const result = await getCommonTransformer(
                response,
                'GET_Admin_Sr_PickList_Configuration_getSubGroupDetails',
            );

            if (result) {
                this.subProductGroupData = result
                    .filter(item => item && item.trim() !== '')
                    .sort((a, b) => a.localeCompare(b))
                    .map(item => ({
                        label: item,
                        value: item,
                    }));
            }
        } catch (error) {
            console.error(
                'Error loading sub product group dropdown data:',
                error,
            );
        }
    }

    async loadProductsServicesDropdown(val) {
        try {
            const params = { searchString: val };
            const query = getProductsServicesDropdownData(params);
            const response = await this.graphQLClientService.query(query);
            const result = await getCommonTransformer(
                response,
                'GET_Admin_Sr_PickList_Configuration_getPrdSrvcDetails',
            );

            if (result != null) {
                this.productsServicesData = result
                    .filter(item => item && item.trim() !== '')
                    .sort((a, b) => a.localeCompare(b))
                    .map(item => ({
                        label: item,
                        value: item,
                    }));
            }
        } catch (error) {
            console.error(
                'Error loading products services dropdwon data:',
                error,
            );
        }
    }

    async loadQueryTypeDropdown(val) {
        try {
            const params = { searchString: val };
            const query = getQueryTypeDropdownData(params);
            const response = await this.graphQLClientService.query(query);
            const result = await getCommonTransformer(
                response,
                'GET_Admin_Sr_PickList_Configuration_getQueryTypeDetails',
            );

            if (result != null) {
                this.queryTypeData = result
                    .filter(item => item && item.trim() !== '')
                    .sort((a, b) => a.localeCompare(b))
                    .map(item => ({
                        label: item,
                        value: item,
                    }));
            }
        } catch (error) {
            console.error('Error loading query type dropdown data:', error);
        }
    }

    handleDropdownChange(index, field, event) {
        this.rows[index][field] = event.detail.value;
        this.requestUpdate();
    }

    handleDropdownData(index, field, event) {
        const { value } = event.detail;

        if (value.length >= 2) {
            if (field === 'productSubGroup') {
                this.loadSubProductGroupDropdown(value).then(data => {
                    this.rows[index].subProductGroupData = data;
                    this.requestUpdate();
                });
            } else if (field === 'productsServices') {
                this.loadProductsServicesDropdown(value).then(data => {
                    this.rows[index].productsServicesData = data;
                    this.requestUpdate();
                });
            } else if (field === 'queryType') {
                this.loadQueryTypeDropdown(value).then(data => {
                    this.rows[index].queryTypeData = data;
                    this.requestUpdate();
                });
            }
        }
    }

    handleInputChange(index, field, event) {
        this.rows[index][field] = event.detail.value;
        this.requestUpdate();
    }

    closeSideSheet() {
        this.requestUpdate();
        const event = new CustomEvent('sb-product-config-add-record-close', {
            detail: { open: false },
        });
        this.dispatchEvent(event);
    }

    async handleSubmit() {
        try {
            if (!validateRequiredField(this.shadowRoot)) {
                return;
            }

            this.isLoading = true;
            const valuesArray = [];

            this.rows.forEach(row => {
                const rowValues = {
                    groupName: row.productGroup
                        ? row.productGroup
                        : this.productGroupDropdownData[0]?.value,
                    subGroup: row.productSubGroup,
                    name: row.productsServices,
                    queryType: row.queryType,
                    recordType: this.recordType,
                };

                if (this.recordType === 'P') {
                    const values = {
                        selfServiceAvailability: row.selfServiceAvailability,
                        message: row.message,
                    };
                    valuesArray.push(values);
                }

                valuesArray.push(rowValues);
            });

            const query = addProductRecord(
                valuesArray
                    .map(item => {
                        const keyValuePairs = Object.entries(item)
                            .map(([key, value]) => `${key}:"${value}"`)
                            .join(',');
                        return `{${keyValuePairs}}`;
                    })
                    .join(','),
            );

            const response = await this.graphQLClientService.query(query);
            const result = await getCommonTransformer(response, 'post_Product');

            if (result != null) {
                const event = new CustomEvent(
                    'sb-product-config-add-record-result',
                    {
                        detail: {
                            open: false,
                            data: result,
                        },
                    },
                );
                this.dispatchEvent(event);
                this.isLoading = false;
                this.closeSideSheet();
            }
        } catch (error) {
            console.error('Error loading page data:', error);
        }
    }

    render() {
        const headerClass = classMap({
            'add-row-header': this.recordType === 'P',
            'add-row-header-internal': this.recordType !== 'P',
        });

        const containerClass = classMap({
            'add-row-container': this.recordType === 'P',
            'add-row-container-internal': this.recordType !== 'P',
        });

        return html`
            <sc-side-sheet
                class="sc-side-sheet"
                label="Add New Product Combination"
                size="Xl"
                width="cover"
                position="right"
                .open=${this.open}
                @sc-hide=${this.closeSideSheet}
            >
                <div slot="label">Add New Product Combination</div>
                <div class="d-flex flex-end">
                    <sc-button
                        fill=""
                        icon="plus"
                        icon-position="left"
                        size="sm"
                        @click=${this.handleAddRowClick}
                    >
                        Add
                    </sc-button>
                    <sc-spacer size="lg" vertical=""></sc-spacer>
                </div>
                <sc-grid-row>
                    <sc-grid-column xl="12">
                        <div class="${headerClass}">
                            <div>
                                <sc-label label="" label-size="sm">
                                    <div slot="label">
                                        <strong>#</strong>
                                    </div>
                                </sc-label>
                            </div>
                            <div>
                                <sc-label label="" label-size="sm">
                                    <div slot="label">
                                        <strong>Product Group</strong>
                                    </div>
                                </sc-label>
                            </div>
                            <div>
                                <sc-label label="" label-size="sm">
                                    <div slot="label">
                                        <strong>Product Sub Group</strong>
                                    </div>
                                </sc-label>
                            </div>
                            <div>
                                <sc-label label="" label-size="sm">
                                    <div slot="label">
                                        <strong>Product And Services</strong>
                                    </div>
                                </sc-label>
                            </div>
                            <div>
                                <sc-label label="" label-size="sm">
                                    <div slot="label">
                                        <strong>Query Type</strong>
                                    </div>
                                </sc-label>
                            </div>
                            ${this.recordType === 'P'
                                ? html` <div>
                                          <sc-label label="" label-size="sm">
                                              <div slot="label">
                                                  <strong
                                                      >Self Service Availability
                                                  </strong>
                                              </div>
                                          </sc-label>
                                      </div>
                                      <div>
                                          <sc-label label="" label-size="sm">
                                              <div slot="label">
                                                  <strong>Message</strong>
                                              </div>
                                          </sc-label>
                                      </div>`
                                : ''}
                            <div>
                                <sc-label label="" label-size="sm">
                                    <div slot="label">
                                        <strong>Action</strong>
                                    </div>
                                </sc-label>
                            </div>
                        </div>
                        ${this.rows.map(
                            (row, index) => html`
                                <div class="${containerClass}">
                                    <div class="pt-3">${index + 1}</div>
                                    <div>
                                        <sc-dropdown-input
                                            placeholder="Select"
                                            .value=${this
                                                .productGroupDropdownData[0]
                                                ?.value}
                                            border-type="box"
                                            required=""
                                            success-message=""
                                            @sc-select=${v =>
                                                this.handleDropdownChange(
                                                    index,
                                                    'productGroup',
                                                    v,
                                                )}
                                            @sc-input=${v =>
                                                this.handleDropdownData(
                                                    index,
                                                    'productGroup',
                                                    v,
                                                )}
                                            .data=${this
                                                .productGroupDropdownData}
                                        >
                                        </sc-dropdown-input>
                                    </div>
                                    <div>
                                        <sc-dropdown-input
                                            placeholder="Search..."
                                            value=""
                                            border-type="box"
                                            success-message=""
                                            required=""
                                            @sc-select=${v =>
                                                this.handleDropdownChange(
                                                    index,
                                                    'productSubGroup',
                                                    v,
                                                )}
                                            @sc-input=${v =>
                                                this.handleDropdownData(
                                                    index,
                                                    'productSubGroup',
                                                    v,
                                                )}
                                            .data=${this.rows[index]
                                                ?.subProductGroupData ||
                                            this.subProductGroupData ||
                                            []}
                                        >
                                        </sc-dropdown-input>
                                    </div>
                                    <div>
                                        <sc-dropdown-input
                                            placeholder="Search..."
                                            value=""
                                            border-type="box"
                                            success-message=""
                                            required=""
                                            @sc-select=${v =>
                                                this.handleDropdownChange(
                                                    index,
                                                    'productsServices',
                                                    v,
                                                )}
                                            @sc-input=${v =>
                                                this.handleDropdownData(
                                                    index,
                                                    'productsServices',
                                                    v,
                                                )}
                                            .data=${this.rows[index]
                                                ?.productsServicesData ||
                                            this.productsServicesData ||
                                            []}
                                        >
                                        </sc-dropdown-input>
                                    </div>
                                    <div>
                                        <sc-dropdown-input
                                            placeholder="Search..."
                                            value=""
                                            border-type="box"
                                            success-message=""
                                            required=""
                                            @sc-select=${v =>
                                                this.handleDropdownChange(
                                                    index,
                                                    'queryType',
                                                    v,
                                                )}
                                            @sc-input=${v =>
                                                this.handleDropdownData(
                                                    index,
                                                    'queryType',
                                                    v,
                                                )}
                                            .data=${this.rows[index]
                                                ?.queryTypeData ||
                                            this.queryTypeData ||
                                            []}
                                        >
                                        </sc-dropdown-input>
                                    </div>
                                    ${this.recordType === 'P'
                                        ? html` <div>
                                                  <sc-dropdown-input
                                                      label-size="xs"
                                                      placeholder="Select"
                                                      value=""
                                                      border-type="box"
                                                      success-message=""
                                                      @sc-select=${v =>
                                                          this.handleDropdownChange(
                                                              index,
                                                              'selfServiceAvailability',
                                                              v,
                                                          )}
                                                  >
                                                      <sc-dropdown-option
                                                          value="yes"
                                                          >Yes</sc-dropdown-option
                                                      >
                                                      <sc-dropdown-option
                                                          value="no"
                                                          >No</sc-dropdown-option
                                                      >
                                                  </sc-dropdown-input>
                                              </div>
                                              <div>
                                                  <sc-text-input
                                                      placeholder="message"
                                                      value=""
                                                      rows="5"
                                                      border-type="box"
                                                      @sc-blur=${v =>
                                                          this.handleInputChange(
                                                              index,
                                                              'message',
                                                              v,
                                                          )}
                                                  >
                                                  </sc-text-input>
                                              </div>`
                                        : ''}
                                    <div class="pt-1">
                                        <sc-icon-button
                                            type="default"
                                            size="lg"
                                            name="trash--line"
                                            no-border=""
                                            @click=${() => {
                                                this.handleDeleteRowClick(
                                                    index,
                                                );
                                            }}
                                        >
                                        </sc-icon-button>
                                    </div>
                                </div>
                            `,
                        )}
                    </sc-grid-column>
                </sc-grid-row>
                ${this.errorMsg
                    ? html`<sc-alert
                          type="error"
                          mode="default"
                          title=""
                          open=""
                      >
                          ${this.errorMsg}
                      </sc-alert>`
                    : html``}
                <sc-spacer size="sm" vertical=""></sc-spacer>
                <div class="d-flex">
                    <sc-button
                        fill
                        ?loading=${this.isLoading}
                        loading-text="...Submitting"
                        @click=${() => this.handleSubmit()}
                        >Submit</sc-button
                    >
                    <sc-spacer size="xs" horizontal=""></sc-spacer>
                    <sc-button @click=${this.closeSideSheet} type="default"
                        >Cancel</sc-button
                    >
                </div>
            </sc-side-sheet>
        `;
    }
}

if (!customElements.get('sb-product-config-add-record')) {
    customElements.define(
        'sb-product-config-add-record',
        ProductConfigAddRecord,
    );
}

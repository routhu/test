validateSLAInput() {
    // Validate Near SLA and Breach SLA inputs
    this.validateField('nearSLA', this.nearSLA);
    this.validateField('breachSLA', this.BreachSLA);

    // Update form validation errors
    this.formValidationErrors = { ...this.formValidationErrors };
}

validateField(field, value) {
    // Clear existing errors for the field
    this.formValidationErrors[field] = [];

    // Perform validations based on the field type
    if (field === 'nearSLA' || field === 'breachSLA') {
        this.validateRequired(field, value);
        this.validateNearSLABreachSLA(field, this.nearSLA, this.BreachSLA);
    }

    // Update form validation errors if any value is present
    if (value) {
        this.formValidationErrors = { ...this.formValidationErrors };
    }
}

validateRequired(field, value) {
    // Check if the value is valid and not zero
    if (!value || value === 0) {
        this.formValidationErrors[field].push('Cannot be Zero');
    }
}

validateNearSLABreachSLA(field, nearSLA, breachSLA) {
    // Ensure Near SLA is not greater than Breach SLA
    if (nearSLA > breachSLA) {
        const errorMessage =
            field === 'nearSLA'
                ? 'Nearing SLA Cannot be greater than Breached SLA'
                : 'Breached SLA Cannot be less than Nearing SLA';
        this.formValidationErrors[field].push(errorMessage);
    }
}
validateSLAInput() {
    // Validate Near SLA and Breach SLA inputs
    this.validateField('nearSLA', this.nearSLA);
    this.validateField('breachSLA', this.BreachSLA);

    // Check for specific error messages in validation results
    const nearSLAErrors = this.formValidationErrors.nearSLA || [];
    const breachSLAErrors = this.formValidationErrors.breachSLA || [];

    // If specific error messages exist, return false (validation failed)
    const hasBlockingErrors = nearSLAErrors.includes(
        'Nearing SLA Cannot be greater than Breached SLA'
    ) || breachSLAErrors.includes(
        'Breached SLA Cannot be less than Nearing SLA'
    );

    return !hasBlockingErrors; // Return true if no blocking errors
}

async handleSubmit() {
    try {
        // Validate required fields in the shadow DOM
        const requiredFieldsValid = validateRequiredField(this.shadowRoot);

        // Validate SLA inputs
        const slaValid = this.validateSLAInput();

        // Block submission if either validation fails
        if (!requiredFieldsValid || !slaValid) {
            console.warn('Form submission blocked due to validation errors.');
            return; // Block form submission
        }

        // Proceed with the rest of the form submission logic
        this.isLoading = true;
        const valuesArray = [];

        const WorkBasketName = this.workbasketLabel;
        const UniqueWorkBasketName = this.uniqueWorkbasket;
        const pyLabel = this.selectedWBdropdown || this.uniqueWorkbasket;
        const NearingSLA = this.nearSLA;
        const BreachedSLA = this.BreachSLA;

        const rowValues = {
            insName: WorkBasketName,
            pyLabel: pyLabel,
            workBasketName: UniqueWorkBasketName,
            wbName: pyLabel,
            nearingSlaTime: NearingSLA,
            breachedSlaTime: BreachedSLA,
            applicationName: this.businessFunction,
            createdBy: this.userPSID,
            makerName: this.userOp

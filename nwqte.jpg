validateSLAInput(rowIndex) {
    // Clear previous validation errors for this row
    this.formValidationErrors[rowIndex] = {
        nearSLA: [],
        breachSLA: [],
    };

    let isValid = true;
    const row = this.rows[rowIndex];

    // Validate nearSLA field for this row
    if (!row.nearSLA || row.nearSLA === 0) {
        this.formValidationErrors[rowIndex].nearSLA.push('This field is required');
        isValid = false;
    }

    // Validate breachSLA field for this row
    if (!row.BreachSLA || row.BreachSLA === 0) {
        this.formValidationErrors[rowIndex].breachSLA.push('This field is required');
        isValid = false;
    }

    // Business Logic Validation: NearSLA must not be greater than BreachSLA for this row
    if (row.nearSLA >= row.BreachSLA) {
        this.formValidationErrors[rowIndex].nearSLA.push(
            'Nearing SLA Cannot be greater than Breached SLA'
        );
        this.formValidationErrors[rowIndex].breachSLA.push(
            'Breached SLA Cannot be less than or equal to Nearing SLA'
        );
        isValid = false;
    }

    return isValid;
}

async handleSubmit() {
    try {
        // Validate all rows
        let slaValid = true;
        for (let index = 0; index < this.rows.length; index++) {
            const rowValid = this.validateSLAInput(index);
            if (!rowValid) {
                slaValid = false;
            }
        }

        const requiredFieldsValid = this.validateRequiredField();

        if (!slaValid || !requiredFieldsValid) {
            return;
        }

        // Your submit logic continues...
        this.isLoading = true;
        // Rest of the submission code...
    } catch (error) {
        console.error('Error loading page data:', error);
    }
}
